from ast import arg
import sys
from tkinter import W
import cx_Oracle as sq
from PyQt5.QtWidgets import QApplication, QWidget, QLabel, QLineEdit, QPushButton, QTreeView ,QMessageBox
from PyQt5.QtGui import QStandardItemModel
from PyQt5.QtCore import Qt

class insert(QWidget):
    global W
    def __init__(self):
        super().__init__()
        self.initUI()
        
    def initUI(self):
        self.setGeometry(1400, 330, 800, 160)
        self.setWindowTitle("주문")
        
        self.lblorder = QLabel("주문번호" , self)
        self.lblorder.move(40, 40)
        self.txtorder = QLineEdit(self)
        self.txtorder.move(40+60, 35)
        self.lblCode = QLabel("상품코드" , self)
        self.lblCode.move(40, 70)
        self.txtCode = QLineEdit(self)
        self.txtCode.move(40+60, 65)
        self.lblname = QLabel("상품이름" , self)
        self.lblname.move(40, 100)
        self.txtname = QLineEdit(self)
        self.txtname.move(100, 95)
        self.lblbrand = QLabel("브랜드" , self)
        self.lblbrand.move(260, 40)
        self.txtbrand = QLineEdit(self)
        self.txtbrand.move(310, 35)
        self.lblcount = QLabel("주문량" , self)
        self.lblcount.move(260, 70)
        self.txtcount = QLineEdit(self)
        self.txtcount.move(310, 65)
        self.lblset = QLabel("규격" , self)
        self.lblset.move(260, 100)
        self.txtset = QLineEdit(self)
        self.txtset.move(310, 95)
        self.lblprice = QLabel("금액" , self)
        self.lblprice.move(480, 40)
        self.txtprice = QLineEdit(self)
        self.txtprice.move(510, 35)
        
        self.btnOrder = QPushButton("주문하기", self)
        self.btnOrder.move(680,32)
        self.btnOrder.clicked.connect(self.udb)
    def udb(self):
        if (self.txtname.text() != "") and (self.txtbrand.text() != "") and (self.txtCode.text() != "") and (self.txtcount.text() != "") and (self.txtprice.text() != "") and (self.txtset.text() != ""):
            try:
                self.cmd = "insert into CAR values ('{}' , '{}' , '{}' , '{}' , '{}' , '{}' , '{}' )".format(self.txtorder.text(), self.txtname.text(), self.txtbrand.text(), self.txtCode.text(), self.txtcount.text(), self.txtprice.text(), self.txtset.text())
                print(self.cmd)
                W.cur.execute(self.cmd)
                W.db.commit()
            except:
                QMessageBox.information(self, "인설트 실패" , "다시 한번 확인하고 입력하세요." , QMessageBox.Yes, QMessageBox.Yes)
                return
        else:
            QMessageBox.information(self, "인설트 실패" , "빈칸을 다 채워주세요." , QMessageBox.Yes, QMessageBox.Yes)
            return
        self.close() 
    def showEvent(self, QShowEvent):
        self.txtorder.setText(str(W.cnt[0] + 1))
        self.txtprice.clear()
        self.txtset.clear()
        self.txtcount.clear()
        self.txtbrand.clear()
        self.txtCode.clear()
        self.txtname.clear()

class JAEDB(QWidget):
    global k
    def __init__(self):
        super().__init__()
        self.Connected()
        self.initUI()

   
    def Connected(self):
        try:
           self.db = sq.connect("scott", "tiger" , "127.0.0.1:1521/JAVA")
           print("연결됨")
        except:
            exit(1)      
        self.cur = self.db.cursor()
        
            
    def initUI(self):
        self.w = 800
        self.h = 600
        self.btnSize = 40
        self.setGeometry(300, 300, self.w, self.h)
        self.setWindowTitle("재순이의 DB")

        self.lblorder = QLabel("주문번호" , self)
        self.lblorder.move(40, 40)
        self.txtorder = QLineEdit(self)
        self.txtorder.move(40+60, 35)
        self.lblCode = QLabel("상품코드" , self)
        self.lblCode.move(40, 70)
        self.txtCode = QLineEdit(self)
        self.txtCode.move(40+60, 65)
        self.lblname = QLabel("상품이름" , self)
        self.lblname.move(40, 100)
        self.txtname = QLineEdit(self)
        self.txtname.move(100, 95)
        self.lblbrand = QLabel("브랜드" , self)
        self.lblbrand.move(260, 40)
        self.txtbrand = QLineEdit(self)
        self.txtbrand.move(310, 35)
        self.lblcount = QLabel("주문량" , self)
        self.lblcount.move(260, 70)
        self.txtcount = QLineEdit(self)
        self.txtcount.move(310, 65)
        self.lblset = QLabel("규격" , self)
        self.lblset.move(260, 100)
        self.txtset = QLineEdit(self)
        self.txtset.move(310, 95)
        self.lblprice = QLabel("금액" , self)
        self.lblprice.move(480, 40)
        self.txtprice = QLineEdit(self)
        self.txtprice.move(510, 35)
        
        self.list = QTreeView(self)
        self.list.setRootIsDecorated(False)
        self.list.setAlternatingRowColors(True)
        self.list.resize(750,400)
        self.list.move(20,130)
        
        self.content = QStandardItemModel(0 , 7, self)
        self.content.setHeaderData(0, Qt.Horizontal, "주문번호")
        self.content.setHeaderData(1, Qt.Horizontal, "상품이름")
        self.content.setHeaderData(2, Qt.Horizontal, "브랜드")
        self.content.setHeaderData(3, Qt.Horizontal, "상품코드")
        self.content.setHeaderData(4, Qt.Horizontal, "주문량")
        self.content.setHeaderData(5, Qt.Horizontal, "금액")
        self.content.setHeaderData(6, Qt.Horizontal, "규격")
        self.list.clicked.connect(self.selec)
       
        self.list.setModel(self.content)
        self.list.setColumnWidth(0, 100)
        self.list.setColumnWidth(1, 100)
        self.list.setColumnWidth(2, 100)
        self.list.setColumnWidth(3, 90)
        self.list.setColumnWidth(4, 100)
        self.list.setColumnWidth(5, 100)
        self.list.setColumnWidth(6, 120)

        
        self.cmd3 = QPushButton('주문', self)
        self.cmd3.clicked.connect(self.enterNew)
        self.cmd3.resize(self.btnSize, self.btnSize)
        self.cmd4 = QPushButton('변경', self)
        self.cmd4.clicked.connect(self.updat)
        self.cmd4.resize(self.btnSize, self.btnSize)
        self.cmd5 = QPushButton('삭제', self)
        self.cmd5.clicked.connect(self.delt)
        self.cmd5.resize(self.btnSize, self.btnSize)
        self.cur.execute("select count(*) from CAR")
        self.db.commit()
        self.cnt = self.cur.fetchone()[0]
        self.show()
    def enterNew(self):
        k.show()
    
    def delt(self):
        d = QMessageBox.question(self, "삭제확인" , "정말로 삭제합니까", QMessageBox.Yes|QMessageBox.No,QMessageBox.No)
        if d == QMessageBox.Yes:
            self.cmd = "delete from CAR where ORDERNUMBER = {}".format(self.txtorder.text())
            self.cur.execute(self.cmd)
            self.db.commit()
            self.cnt = self.cnt - 1
            self.content.removeRow(self.cnt)
            self.wod()
    def wod(self):
        if self.list.currentIndex().row==0:
            return
        else:
            self.list.setCurrentIndex(self.content.index(self.list.currentIndex().row - 1, 0))
            self.selec()          
   
    def selec(self):
        self.txtorder.setText(str(self.content.index(self.list.currentIndex().row(),0).data()))
        self.txtname.setText(self.content.index(self.list.currentIndex().row(),1).data())
        self.txtbrand.setText(self.content.index(self.list.currentIndex().row(),2).data())
        self.txtCode.setText(self.content.index(self.list.currentIndex().row(),3).data())
        self.txtcount.setText(str(self.content.index(self.list.currentIndex().row(),4).data()))
        self.txtprice.setText(str(self.content.index(self.list.currentIndex().row(),5).data()))    
        self.txtset.setText(self.content.index(self.list.currentIndex().row(),6).data())
    
    def updat(self):
        if (self.txtname.text() != "") and (self.txtbrand.text() != "") and (self.txtCode.text() != "") and (self.txtcount.text() != "") and (self.txtprice.text() != "") and (self.txtset.text() != ""):
            try:
                self.cmd = "update CAR set PNAME = '{}' , BRAND = '{}' , PCODE = '{}' , PRODUCTCOUNT = {} , PRICE = {} , STANDARD = '{}' where ORDERNUMBER = {}".format(self.txtname.text(),self.txtbrand.text(),self.txtCode.text(),self.txtcount.text(),self.txtprice.text(),self.txtset.text(),self.txtorder.text())
                self.cur.execute(self.cmd)
                self.db.commit()
            except:
                QMessageBox.information(self, "변경 실패" , "다시 한번 확인하고 입력하세요." , QMessageBox.Yes, QMessageBox.Yes)
                return
        else:
            QMessageBox.information(self, "변경 실패" , "빈칸을 다 채워주세요." , QMessageBox.Yes, QMessageBox.Yes)
            return
        QMessageBox.information(self, "변경 완료." , "변경 성공하였습니다." , QMessageBox.Yes, QMessageBox.Yes)        
    def resizeEvent(self, QResizeEvent):
        self.btnX = self.width() - 250
        self.btnY = self.height() - 60 
        self.cmd3.move(self.btnX+self.btnSize*2, self.btnY)
        self.cmd4.move(self.btnX+self.btnSize*3, self.btnY)
        self.cmd5.move(self.btnX+self.btnSize*4, self.btnY)
    
    def closeEvent(self, QCloseEvent):
        self.db.close()  
    
    def enterEvent(self, QEvent):
        self.cmd = "select * from CAR"
        self.cur.execute(self.cmd)
        self.db.commit()
        ar = self.cur.fetchall()
        
        for x in range(len(ar)):
            self.content.removeRow(x)
            self.content.insertRow(x)
            self.content.setData(self.content.index(x, 0), ar[x][0])
            self.content.setData(self.content.index(x, 1), ar[x][1])
            self.content.setData(self.content.index(x, 2), ar[x][2])
            self.content.setData(self.content.index(x, 3), ar[x][3])
            self.content.setData(self.content.index(x, 4), ar[x][4])
            self.content.setData(self.content.index(x, 5), ar[x][5])
            self.content.setData(self.content.index(x, 6), ar[x][6])
app = QApplication(sys.argv)
W = JAEDB()
k = insert()
sys.exit(app.exec_())
        
        
